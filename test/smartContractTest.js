"use strict";

//const fs = require ('fs');
//const solc = require('solc');
const ChainsqlAPI = require("../src/index");
const chainsql = new ChainsqlAPI();

const RootUser = {
	secret: "xnoPBzXtMeMyMHUVTgbuqAfg1SUTb",
	address: "zHb9CJAWyB4zj91VRWn96DkukG4bwdtyTh"
};
const abi = '[{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"name":"transferToUser","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"returnMixType","outputs":[{"name":"","type":"uint256"},{"name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"newMem","type":"uint256"}],"name":"setMem","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"returnString","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[],"name":"getMsgSender","outputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getTxOrigin","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"a","type":"uint256"}],"name":"multiply","outputs":[{"name":"d","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"}],"name":"userTransferUser","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"getMem","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"sender","type":"address"},{"indexed":true,"name":"number","type":"uint256"},{"indexed":false,"name":"result","type":"uint256"}],"name":"multiplylog","type":"event"}]';
const deployBytecode = "0x6080604052610707806100136000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680635f7807a4146100a6578063645c9ac8146100f45780636606873b1461018b5780636cf43347146101c65780637a6ce2e114610256578063b8077e28146102b4578063c6888fa11461030b578063e8b3891e1461035a578063f05913081461039e578063f8b2cb4f146103c9575b005b6100f2600480360360408110156100bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061042e565b005b34801561010057600080fd5b50610109610479565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561014f578082015181840152602081019050610134565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561019757600080fd5b506101c4600480360360208110156101ae57600080fd5b81019080803590602001909291905050506104c4565b005b3480156101d257600080fd5b506101db6104ce565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021b578082015181840152602081019050610200565b50505050905090810190601f1680156102485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026257600080fd5b5061026b610531565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b3480156102c057600080fd5b506102c9610542565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031757600080fd5b506103446004803603602081101561032e57600080fd5b810190808035906020019092919050505061054a565b6040518082815260200191505060405180910390f35b61039c6004803603602081101561037057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610667565b005b3480156103aa57600080fd5b506103b36106b1565b6040518082815260200191505060405180910390f35b3480156103d557600080fd5b50610418600480360360208110156103ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ba565b6040518082815260200191505060405180910390f35b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610474573d6000803e3d6000fd5b505050565b60006060600061029a9050806040805190810160405280601b81526020017f737472696e675465737432666f724d69785479706552657475726e000000000081525092509250509091565b8060008190555050565b60608060405190810160405280602981526020017f737472696e675465737431666f72616c6f6e67537472696e674d6f726574686181526020017f6e33324279746534310000000000000000000000000000000000000000000000815250905090565b600080336006809050915091509091565b600032905090565b60006001821115156105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f6d75737420696e7075742061206269676765722076616c7565207468616e206f81526020017f6e6500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600783029050827f414b7ab3d46ecc8ab359636c133f9a1b88ffc8c08e9560da2b3ef7949edf8ca33383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a280915050919050565b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156106ad573d6000803e3d6000fd5b5050565b60008054905090565b60008173ffffffffffffffffffffffffffffffffffffffff163190509190505600a165627a7a723058206503ab514bf3f130f914693d97643dc702c6a46fa16526d2b59a62642b85e82d0029";
const contractAddr = "zcdFPChLUNYXQTV6zr2osrWG8pV7Zyh8FL";


main();

async function main(){
	try {
		await chainsql.connect("ws://127.0.0.1:6006");
		console.log("connected successfully");

		chainsql.as(RootUser);
		// let contractCode = fs.readFileSync("./solidity-example/solidity-example.sol");
		// let compileResult = solc.compile(contractCode.toString(), 1);
		// for (var contractName in compileResult.contracts) {
		// 	// code and ABI that are needed by web3
		// 	console.log(contractName + ': ' + compileResult.contracts[contractName].bytecode);
		// 	deployBytecode = "0x" + compileResult.contracts[contractName].bytecode;
		// 	console.log(contractName + ': ' + compileResult.contracts[contractName].interface);
		// 	abi = compileResult.contracts[contractName].interface;
		// }

		// deployContractAwait();
		deployContract();

		// callContract();
	} catch (error) {
		console.log(error);
	}
}

function callContract(){
	const myContract = chainsql.contract(JSON.parse(abi), contractAddr);
	/*use contract call way*/
	// contractCall(myContract);

	/*methods.events.eventlog*/
	// contractEvent(myContract);
	
	/*use contract submit way*/
	contractSubmit(myContract);
	
	// callContractWithMsgValue(myContract);

	/*get function encodeABI*/
	// getFuncEncodeABI(myContract);

    getFuncActualParams(myContract);
	
	/*methods.function.auto*/
	// contractAuto(myContract);
}

function contractSubmit(myContract){
	/*methods.function.submit*/
	chainsql.payToContract(contractAddr, 2000, 30000000).submit({
		expect: "validate_success"
	}).then(data => {
		console.log(data);
	}).catch(err => {
		console.log(err);
	});
	// Promise
	// myContract.methods.transferToUser("zLtH4NFSqDFioq5zifriKKLf8xcyyw7VCf", 12000000).submit({
	// 	Gas: 30000000,
	// 	ContractValue : "20000000",
	// 	expect: "validate_success"
	// }).then(data => {
	// 	console.log(data);
	// }).catch(err => {
	// 	console.log(err);
	// });	

	//callback
	// myContract.methods.userTransferUser("zPif8u9YqL8NhHxXGHKxopAaFMZ3rwHF6s").submit({
	// 	Gas: 30000000,
	// 	ContractValue: "12000000",
	// 	expect: "validate_success"
	// }, function (err, res) {
	// 	err ? console.log(err) : console.log(res);
	// });
}

function contractEvent(myContract){
	myContract.events.multiplylog((err, res) => {
		err ? console.log(err) : console.log(res);
	});
}

function callContractWithMsgValue(contractObj){
	contractObj.methods.userTransferUser("zU8gAWTXZgLmaF1XVR8briCdnWXJsT8njM").submit({
		Gas: 500000,
		ContractValue: "111111",
		expect: "validate_success"
	}, (err, res) => {
		err ? console.log(err) : console.log(res);
	});
}

function contractCall(contractObj){
	/*methods.function.call*/
	contractObj.methods.getMsgSender().call(function (err, res) {
		err ? console.log(err) : console.log(res);
	});
}

function getFuncEncodeABI(contractObj){
	/*methods.function.encodeABI*/
	let funInputData = contractObj.methods.setMem(16).encodeABI();
	console.log(funInputData);
}
function getFuncActualParams(contractObj){
    let bytecode = "0x608060405260405162000b6a38038062000b6a8339818101604052810190620000299190620001b7565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600190805190602001906200008192919062000089565b50506200038c565b82805462000097906200029d565b90600052602060002090601f016020900481019282620000bb576000855562000107565b82601f10620000d657805160ff191683800117855562000107565b8280016001018555821562000107579182015b8281111562000106578251825591602001919060010190620000e9565b5b5090506200011691906200011a565b5090565b5b80821115620001355760008160009055506001016200011b565b5090565b6000620001506200014a8462000231565b62000208565b9050828152602081018484840111156200016f576200016e6200036c565b5b6200017c84828562000267565b509392505050565b600082601f8301126200019c576200019b62000367565b5b8151620001ae84826020860162000139565b91505092915050565b600060208284031215620001d057620001cf62000376565b5b600082015167ffffffffffffffff811115620001f157620001f062000371565b5b620001ff8482850162000184565b91505092915050565b60006200021462000227565b9050620002228282620002d3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200024f576200024e62000338565b5b6200025a826200037b565b9050602081019050919050565b60005b83811015620002875780820151818401526020810190506200026a565b8381111562000297576000848401525b50505050565b60006002820490506001821680620002b657607f821691505b60208210811415620002cd57620002cc62000309565b5b50919050565b620002de826200037b565b810181811067ffffffffffffffff821117156200030057620002ff62000338565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107ce806200039c6000396000f3fe6080604052600436106100435760003560e01c806341c0e1b5146100465780634ac0d66e1461005d57806380cc6ac114610086578063cfae3217146100b157610044565b5b005b34801561005257600080fd5b5061005b6100dc565b005b34801561006957600080fd5b50610084600480360381019061007f91906103ce565b61016b565b005b34801561009257600080fd5b5061009b6101ec565b6040516100a891906105ae565b60405180910390f35b3480156100bd57600080fd5b506100c6610229565b6040516100d391906105ae565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101695760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b806040516101799190610580565b604051809103902060016040516101909190610597565b60405180910390207f047dcd1aa8b77b0b943642129c767533eeacd700c7c1eab092b8ce05d2b2faf56001846040516101ca9291906105d0565b60405180910390a380600190805190602001906101e89291906102bb565b5050565b60606040518060400160405280600581526020017f68656c6c6f000000000000000000000000000000000000000000000000000000815250905090565b606060018054610238906106db565b80601f0160208091040260200160405190810160405280929190818152602001828054610264906106db565b80156102b15780601f10610286576101008083540402835291602001916102b1565b820191906000526020600020905b81548152906001019060200180831161029457829003601f168201915b5050505050905090565b8280546102c7906106db565b90600052602060002090601f0160209004810192826102e95760008555610330565b82601f1061030257805160ff1916838001178555610330565b82800160010185558215610330579182015b8281111561032f578251825591602001919060010190610314565b5b50905061033d9190610341565b5090565b5b8082111561035a576000816000905550600101610342565b5090565b600061037161036c8461062c565b610607565b90508281526020810184848401111561038d5761038c6107a1565b5b610398848285610699565b509392505050565b600082601f8301126103b5576103b461079c565b5b81356103c584826020860161035e565b91505092915050565b6000602082840312156103e4576103e36107ab565b5b600082013567ffffffffffffffff811115610402576104016107a6565b5b61040e848285016103a0565b91505092915050565b600061042282610672565b61042c818561067d565b935061043c8185602086016106a8565b610445816107b0565b840191505092915050565b600061045b82610672565b610465818561068e565b93506104758185602086016106a8565b80840191505092915050565b6000815461048e816106db565b610498818661067d565b945060018216600081146104b357600181146104c5576104f8565b60ff19831686526020860193506104f8565b6104ce8561065d565b60005b838110156104f0578154818901526001820191506020810190506104d1565b808801955050505b50505092915050565b6000815461050e816106db565b610518818661068e565b94506001821660008114610533576001811461054457610577565b60ff19831686528186019350610577565b61054d8561065d565b60005b8381101561056f57815481890152600182019150602081019050610550565b838801955050505b50505092915050565b600061058c8284610450565b915081905092915050565b60006105a38284610501565b915081905092915050565b600060208201905081810360008301526105c88184610417565b905092915050565b600060408201905081810360008301526105ea8185610481565b905081810360208301526105fe8184610417565b90509392505050565b6000610611610622565b905061061d828261070d565b919050565b6000604051905090565b600067ffffffffffffffff8211156106475761064661076d565b5b610650826107b0565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b82818337600083830152505050565b60005b838110156106c65780820151818401526020810190506106ab565b838111156106d5576000848401525b50505050565b600060028204905060018216806106f357607f821691505b602082108114156107075761070661073e565b5b50919050565b610716826107b0565b810181811067ffffffffffffffff821117156107355761073461076d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea164736f6c6343000805000a";
    let contractData = "0x6057361D000000000000000000000000000000000000000000000000000000000000007B";
    let actualParams = contractObj.decodeMethodParams(contractData, bytecode);
    console.log(actualParams);
}

function deployContract(){
	const myContract = chainsql.contract(JSON.parse(abi));
	// Promise
	// myContract.deploy({
	// 	ContractData : deployBytecode,
	// 	arguments : [666]
	// }).submit({
	// 	ContractValue : "10000000",
	// 	Gas : 400000
	// }).then(data => {
	// 	console.log(data);
	// }).catch(err => {
	// 	console.log(err);
	// });

	// callback
	myContract.deploy({
		ContractData : deployBytecode,
		arguments : [666]
	}).submit({
		ContractValue : "10000000",
		Gas : 400000
	}, function (err, res) {
		err ? console.log(err) : console.log(res);

		/* you can call contract function directly here!*/
		// myContract.methods.setMem(16).submit({
		// 	Gas: 500000
		// }, (err, res) => {
		// 	err ? console.log(err) : console.log(res);
		// });
	});
}

async function deployContractAwait(){
	const myContract = chainsql.contract(JSON.parse(abi));
	try {
		let deployRes = await myContract.deploy({
			ContractData : deployBytecode,
			arguments : [666]
		}).submit({
			ContractValue : "10000000",
			Gas : 400000
		});

		console.log(deployRes);
		myContract.methods.setMem(16).submit({
			Gas:500000
		}, (err, res) => {
			err ? console.log(err) : console.log(res);
		});
	} catch (error) {
		console.log(error);
	}
}